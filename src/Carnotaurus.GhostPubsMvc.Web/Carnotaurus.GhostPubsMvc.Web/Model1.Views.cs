//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(Carnotaurus.GhostPubsMvc.Web.GhostPubsEntities),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets219e19e573094049293b74474e2de879219db57c0bd00350805b7bbd1232b242))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets219e19e573094049293b74474e2de879219db57c0bd00350805b7bbd1232b242 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "219e19e573094049293b74474e2de879219db57c0bd00350805b7bbd1232b242"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CMSModelStoreContainer.AddressType")
            {
                return GetView0();
            }

            if (extentName == "CMSModelStoreContainer.FeatureType")
            {
                return GetView1();
            }

            if (extentName == "CMSModelStoreContainer.County")
            {
                return GetView2();
            }

            if (extentName == "CMSModelStoreContainer.Region")
            {
                return GetView3();
            }

            if (extentName == "CMSModelStoreContainer.Feature")
            {
                return GetView4();
            }

            if (extentName == "CMSModelStoreContainer.Note")
            {
                return GetView5();
            }

            if (extentName == "CMSModelStoreContainer.Org")
            {
                return GetView6();
            }

            if (extentName == "CMSModelStoreContainer.Tag")
            {
                return GetView7();
            }

            if (extentName == "CMSModelStoreContainer.AdminArea")
            {
                return GetView8();
            }

            if (extentName == "CMSModelStoreContainer.BookItem")
            {
                return GetView9();
            }

            if (extentName == "GhostPubsEntities.AddressTypes")
            {
                return GetView10();
            }

            if (extentName == "GhostPubsEntities.FeatureTypes")
            {
                return GetView11();
            }

            if (extentName == "GhostPubsEntities.Counties")
            {
                return GetView12();
            }

            if (extentName == "GhostPubsEntities.Regions")
            {
                return GetView13();
            }

            if (extentName == "GhostPubsEntities.Features")
            {
                return GetView14();
            }

            if (extentName == "GhostPubsEntities.Notes")
            {
                return GetView15();
            }

            if (extentName == "GhostPubsEntities.Orgs")
            {
                return GetView16();
            }

            if (extentName == "GhostPubsEntities.Tags")
            {
                return GetView17();
            }

            if (extentName == "GhostPubsEntities.AdminAreas")
            {
                return GetView18();
            }

            if (extentName == "GhostPubsEntities.BookItems")
            {
                return GetView19();
            }

            if (extentName == "CMSModelStoreContainer.Category")
            {
                return GetView20();
            }

            if (extentName == "CMSModelStoreContainer.ContentPage")
            {
                return GetView21();
            }

            if (extentName == "GhostPubsEntities.Categories")
            {
                return GetView22();
            }

            if (extentName == "GhostPubsEntities.ContentPages")
            {
                return GetView23();
            }

            if (extentName == "CMSModelStoreContainer.Book")
            {
                return GetView24();
            }

            if (extentName == "GhostPubsEntities.Books")
            {
                return GetView25();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CMSModelStoreContainer.AddressType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AddressType
        [CMSModel.Store.AddressType](T1.AddressType_AddressTypeID, T1.AddressType_LastModified, T1.AddressType_Name, T1.AddressType_Description, T1.AddressType_Deleted)
    FROM (
        SELECT 
            T.AddressTypeID AS AddressType_AddressTypeID, 
            T.LastModified AS AddressType_LastModified, 
            T.Name AS AddressType_Name, 
            T.Description AS AddressType_Description, 
            T.Deleted AS AddressType_Deleted, 
            True AS _from0
        FROM GhostPubsEntities.AddressTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CMSModelStoreContainer.FeatureType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FeatureType
        [CMSModel.Store.FeatureType](T1.FeatureType_FeatureTypeID, T1.FeatureType_ParentFeatureTypeID, T1.FeatureType_LastModified, T1.FeatureType_Name, T1.FeatureType_Description, T1.FeatureType_Deleted)
    FROM (
        SELECT 
            T.FeatureTypeID AS FeatureType_FeatureTypeID, 
            T.ParentFeatureTypeID AS FeatureType_ParentFeatureTypeID, 
            T.LastModified AS FeatureType_LastModified, 
            T.Name AS FeatureType_Name, 
            T.Description AS FeatureType_Description, 
            T.Deleted AS FeatureType_Deleted, 
            True AS _from0
        FROM GhostPubsEntities.FeatureTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CMSModelStoreContainer.County.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing County
        [CMSModel.Store.County](T1.County_CountyID, T1.County_RegionID, T1.County_Name, T1.County_Description)
    FROM (
        SELECT 
            T.CountyID AS County_CountyID, 
            T.RegionID AS County_RegionID, 
            T.Name AS County_Name, 
            T.Description AS County_Description, 
            True AS _from0
        FROM GhostPubsEntities.Counties AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CMSModelStoreContainer.Region.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Region
        [CMSModel.Store.Region](T1.Region_RegionID, T1.Region_Name, T1.Region_Description, T1.Region_Deleted)
    FROM (
        SELECT 
            T.RegionID AS Region_RegionID, 
            T.Name AS Region_Name, 
            T.Description AS Region_Description, 
            T.Deleted AS Region_Deleted, 
            True AS _from0
        FROM GhostPubsEntities.Regions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CMSModelStoreContainer.Feature.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Feature
        [CMSModel.Store.Feature](T1.Feature_FeatureID, T1.Feature_LastModified, T1.Feature_FeatureTypeID, T1.Feature_Name)
    FROM (
        SELECT 
            T.FeatureID AS Feature_FeatureID, 
            T.LastModified AS Feature_LastModified, 
            T.FeatureTypeID AS Feature_FeatureTypeID, 
            T.Name AS Feature_Name, 
            True AS _from0
        FROM GhostPubsEntities.Features AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CMSModelStoreContainer.Note.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Note
        [CMSModel.Store.Note](T1.Note_NoteID, T1.Note_LastModified, T1.Note_CreateDate, T1.Note_OrgID, T1.Note_Text)
    FROM (
        SELECT 
            T.NoteID AS Note_NoteID, 
            T.LastModified AS Note_LastModified, 
            T.CreateDate AS Note_CreateDate, 
            T.OrgID AS Note_OrgID, 
            T.Text AS Note_Text, 
            True AS _from0
        FROM GhostPubsEntities.Notes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CMSModelStoreContainer.Org.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Org
        [CMSModel.Store.Org](T1.Org_OrgID, T1.Org_Created, T1.Org_Modified, T1.Org_Deleted, T1.Org_AddressTypeID, T1.Org_CountyID, T1.Org_ParentID, T1.Org_TradingStatus, T1.Org_HauntedStatus, T1.Org_TradingName, T1.Org_AlternateName, T1.Org_SearchName, T1.Org_Locality, T1.Org_Town, T1.[Org.Administrative_area_level_2], T1.Org_Postcode, T1.Org_Address, T1.Org_Phone, T1.Org_Twitter, T1.Org_Email, T1.Org_Facebook, T1.Org_Website, T1.Org_OSX, T1.Org_OSY, T1.Org_Lat, T1.Org_Lon, T1.Org_Tried, T1.Org_GoogleMapData, T1.Org_ManualConfirmDate)
    FROM (
        SELECT 
            T.OrgID AS Org_OrgID, 
            T.Created AS Org_Created, 
            T.Modified AS Org_Modified, 
            T.Deleted AS Org_Deleted, 
            T.AddressTypeID AS Org_AddressTypeID, 
            T.CountyID AS Org_CountyID, 
            T.ParentID AS Org_ParentID, 
            T.TradingStatus AS Org_TradingStatus, 
            T.HauntedStatus AS Org_HauntedStatus, 
            T.TradingName AS Org_TradingName, 
            T.AlternateName AS Org_AlternateName, 
            T.SearchName AS Org_SearchName, 
            T.Locality AS Org_Locality, 
            T.Town AS Org_Town, 
            T.Administrative_area_level_2 AS [Org.Administrative_area_level_2], 
            T.Postcode AS Org_Postcode, 
            T.Address AS Org_Address, 
            T.Phone AS Org_Phone, 
            T.Twitter AS Org_Twitter, 
            T.Email AS Org_Email, 
            T.Facebook AS Org_Facebook, 
            CAST(NULL AS [Edm.String]) AS Org_Website, 
            T.OSX AS Org_OSX, 
            T.OSY AS Org_OSY, 
            T.Lat AS Org_Lat, 
            T.Lon AS Org_Lon, 
            T.Tried AS Org_Tried, 
            T.GoogleMapData AS Org_GoogleMapData, 
            T.ManualConfirmDate AS Org_ManualConfirmDate, 
            True AS _from0
        FROM GhostPubsEntities.Orgs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CMSModelStoreContainer.Tag.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Tag
        [CMSModel.Store.Tag](T1.Tag_TagID, T1.Tag_LastModified, T1.Tag_OrgID, T1.Tag_FeatureID)
    FROM (
        SELECT 
            T.TagID AS Tag_TagID, 
            T.LastModified AS Tag_LastModified, 
            T.OrgID AS Tag_OrgID, 
            T.FeatureID AS Tag_FeatureID, 
            True AS _from0
        FROM GhostPubsEntities.Tags AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CMSModelStoreContainer.AdminArea.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AdminArea
        [CMSModel.Store.AdminArea](T1.AdminArea_AdminAreaID, T1.AdminArea_CountyID, T1.AdminArea_Name)
    FROM (
        SELECT 
            T.AdminAreaID AS AdminArea_AdminAreaID, 
            T.CountyID AS AdminArea_CountyID, 
            T.Name AS AdminArea_Name, 
            True AS _from0
        FROM GhostPubsEntities.AdminAreas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CMSModelStoreContainer.BookItem.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing BookItem
        [CMSModel.Store.BookItem](T1.BookItem_BookItemId, T1.BookItem_Created, T1.BookItem_Modified, T1.BookItem_Deleted, T1.BookItem_BookId, T1.BookItem_OrgId, T1.BookItem_County, T1.BookItem_Town, T1.BookItem_AlternativeTown, T1.BookItem_TradingName, T1.BookItem_Text)
    FROM (
        SELECT 
            T.BookItemId AS BookItem_BookItemId, 
            T.Created AS BookItem_Created, 
            T.Modified AS BookItem_Modified, 
            T.Deleted AS BookItem_Deleted, 
            T.BookId AS BookItem_BookId, 
            T.OrgId AS BookItem_OrgId, 
            T.County AS BookItem_County, 
            T.Town AS BookItem_Town, 
            T.AlternativeTown AS BookItem_AlternativeTown, 
            T.TradingName AS BookItem_TradingName, 
            T.Text AS BookItem_Text, 
            True AS _from0
        FROM GhostPubsEntities.BookItems AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for GhostPubsEntities.AddressTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AddressTypes
        [CMSModel.AddressType](T1.AddressType_AddressTypeID, T1.AddressType_LastModified, T1.AddressType_Name, T1.AddressType_Description, T1.AddressType_Deleted)
    FROM (
        SELECT 
            T.AddressTypeID AS AddressType_AddressTypeID, 
            T.LastModified AS AddressType_LastModified, 
            T.Name AS AddressType_Name, 
            T.Description AS AddressType_Description, 
            T.Deleted AS AddressType_Deleted, 
            True AS _from0
        FROM CMSModelStoreContainer.AddressType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for GhostPubsEntities.FeatureTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FeatureTypes
        [CMSModel.FeatureType](T1.FeatureType_FeatureTypeID, T1.FeatureType_ParentFeatureTypeID, T1.FeatureType_LastModified, T1.FeatureType_Name, T1.FeatureType_Description, T1.FeatureType_Deleted)
    FROM (
        SELECT 
            T.FeatureTypeID AS FeatureType_FeatureTypeID, 
            T.ParentFeatureTypeID AS FeatureType_ParentFeatureTypeID, 
            T.LastModified AS FeatureType_LastModified, 
            T.Name AS FeatureType_Name, 
            T.Description AS FeatureType_Description, 
            T.Deleted AS FeatureType_Deleted, 
            True AS _from0
        FROM CMSModelStoreContainer.FeatureType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for GhostPubsEntities.Counties.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Counties
        [CMSModel.County](T1.County_CountyID, T1.County_RegionID, T1.County_Name, T1.County_Description)
    FROM (
        SELECT 
            T.CountyID AS County_CountyID, 
            T.RegionID AS County_RegionID, 
            T.Name AS County_Name, 
            T.Description AS County_Description, 
            True AS _from0
        FROM CMSModelStoreContainer.County AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for GhostPubsEntities.Regions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Regions
        [CMSModel.Region](T1.Region_RegionID, T1.Region_Name, T1.Region_Description, T1.Region_Deleted)
    FROM (
        SELECT 
            T.RegionID AS Region_RegionID, 
            T.Name AS Region_Name, 
            T.Description AS Region_Description, 
            T.Deleted AS Region_Deleted, 
            True AS _from0
        FROM CMSModelStoreContainer.Region AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for GhostPubsEntities.Features.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Features
        [CMSModel.Feature](T1.Feature_FeatureID, T1.Feature_LastModified, T1.Feature_FeatureTypeID, T1.Feature_Name)
    FROM (
        SELECT 
            T.FeatureID AS Feature_FeatureID, 
            T.LastModified AS Feature_LastModified, 
            T.FeatureTypeID AS Feature_FeatureTypeID, 
            T.Name AS Feature_Name, 
            True AS _from0
        FROM CMSModelStoreContainer.Feature AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for GhostPubsEntities.Notes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Notes
        [CMSModel.Note](T1.Note_NoteID, T1.Note_LastModified, T1.Note_CreateDate, T1.Note_OrgID, T1.Note_Text)
    FROM (
        SELECT 
            T.NoteID AS Note_NoteID, 
            T.LastModified AS Note_LastModified, 
            T.CreateDate AS Note_CreateDate, 
            T.OrgID AS Note_OrgID, 
            T.Text AS Note_Text, 
            True AS _from0
        FROM CMSModelStoreContainer.Note AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for GhostPubsEntities.Orgs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Orgs
        [CMSModel.Org](T1.Org_OrgID, T1.Org_Deleted, T1.Org_AddressTypeID, T1.Org_CountyID, T1.Org_ParentID, T1.Org_TradingStatus, T1.Org_HauntedStatus, T1.Org_TradingName, T1.Org_SearchName, T1.Org_Town, T1.Org_Postcode, T1.Org_Address, T1.Org_Phone, T1.Org_Twitter, T1.Org_Email, T1.Org_Facebook, T1.Org_OSX, T1.Org_OSY, T1.Org_Lat, T1.Org_Lon, T1.Org_Tried, T1.Org_GoogleMapData, T1.Org_Locality, T1.[Org.Administrative_area_level_2], T1.Org_Created, T1.Org_Modified, T1.Org_ManualConfirmDate, T1.Org_AlternateName)
    FROM (
        SELECT 
            T.OrgID AS Org_OrgID, 
            T.Deleted AS Org_Deleted, 
            T.AddressTypeID AS Org_AddressTypeID, 
            T.CountyID AS Org_CountyID, 
            T.ParentID AS Org_ParentID, 
            T.TradingStatus AS Org_TradingStatus, 
            T.HauntedStatus AS Org_HauntedStatus, 
            T.TradingName AS Org_TradingName, 
            T.SearchName AS Org_SearchName, 
            T.Town AS Org_Town, 
            T.Postcode AS Org_Postcode, 
            T.Address AS Org_Address, 
            T.Phone AS Org_Phone, 
            T.Twitter AS Org_Twitter, 
            T.Email AS Org_Email, 
            T.Facebook AS Org_Facebook, 
            T.OSX AS Org_OSX, 
            T.OSY AS Org_OSY, 
            T.Lat AS Org_Lat, 
            T.Lon AS Org_Lon, 
            T.Tried AS Org_Tried, 
            T.GoogleMapData AS Org_GoogleMapData, 
            T.Locality AS Org_Locality, 
            T.Administrative_area_level_2 AS [Org.Administrative_area_level_2], 
            T.Created AS Org_Created, 
            T.Modified AS Org_Modified, 
            T.ManualConfirmDate AS Org_ManualConfirmDate, 
            T.AlternateName AS Org_AlternateName, 
            True AS _from0
        FROM CMSModelStoreContainer.Org AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for GhostPubsEntities.Tags.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Tags
        [CMSModel.Tag](T1.Tag_TagID, T1.Tag_LastModified, T1.Tag_OrgID, T1.Tag_FeatureID)
    FROM (
        SELECT 
            T.TagID AS Tag_TagID, 
            T.LastModified AS Tag_LastModified, 
            T.OrgID AS Tag_OrgID, 
            T.FeatureID AS Tag_FeatureID, 
            True AS _from0
        FROM CMSModelStoreContainer.Tag AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for GhostPubsEntities.AdminAreas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AdminAreas
        [CMSModel.AdminArea](T1.AdminArea_AdminAreaID, T1.AdminArea_CountyID, T1.AdminArea_Name)
    FROM (
        SELECT 
            T.AdminAreaID AS AdminArea_AdminAreaID, 
            T.CountyID AS AdminArea_CountyID, 
            T.Name AS AdminArea_Name, 
            True AS _from0
        FROM CMSModelStoreContainer.AdminArea AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for GhostPubsEntities.BookItems.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing BookItems
        [CMSModel.BookItem](T1.BookItem_BookItemId, T1.BookItem_BookId, T1.BookItem_OrgId, T1.BookItem_County, T1.BookItem_Town, T1.BookItem_TradingName, T1.BookItem_Text, T1.BookItem_Created, T1.BookItem_Modified, T1.BookItem_Deleted, T1.BookItem_AlternativeTown)
    FROM (
        SELECT 
            T.BookItemId AS BookItem_BookItemId, 
            T.BookId AS BookItem_BookId, 
            T.OrgId AS BookItem_OrgId, 
            T.County AS BookItem_County, 
            T.Town AS BookItem_Town, 
            T.TradingName AS BookItem_TradingName, 
            T.Text AS BookItem_Text, 
            T.Created AS BookItem_Created, 
            T.Modified AS BookItem_Modified, 
            T.Deleted AS BookItem_Deleted, 
            T.AlternativeTown AS BookItem_AlternativeTown, 
            True AS _from0
        FROM CMSModelStoreContainer.BookItem AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CMSModelStoreContainer.Category.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Category
        [CMSModel.Store.Category](T1.Category_CategoryID, T1.Category_Name)
    FROM (
        SELECT 
            T.CategoryID AS Category_CategoryID, 
            T.Name AS Category_Name, 
            True AS _from0
        FROM GhostPubsEntities.Categories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CMSModelStoreContainer.ContentPage.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ContentPage
        [CMSModel.Store.ContentPage](T1.ContentPage_PageID, T1.ContentPage_CategoryID, T1.ContentPage_OrderID, T1.ContentPage_PageTemplateID, T1.ContentPage_Name, T1.ContentPage_Title, T1.ContentPage_Lead, T1.ContentPage_WellHeader, T1.ContentPage_Description, T1.ContentPage_HtmlText, T1.ContentPage_DateCreated, T1.ContentPage_DateModified, T1.ContentPage_Deleted)
    FROM (
        SELECT 
            T.PageID AS ContentPage_PageID, 
            T.CategoryID AS ContentPage_CategoryID, 
            T.OrderID AS ContentPage_OrderID, 
            T.PageTemplateID AS ContentPage_PageTemplateID, 
            T.Name AS ContentPage_Name, 
            T.Title AS ContentPage_Title, 
            T.Lead AS ContentPage_Lead, 
            T.WellHeader AS ContentPage_WellHeader, 
            T.Description AS ContentPage_Description, 
            T.HtmlText AS ContentPage_HtmlText, 
            T.DateCreated AS ContentPage_DateCreated, 
            T.DateModified AS ContentPage_DateModified, 
            T.Deleted AS ContentPage_Deleted, 
            True AS _from0
        FROM GhostPubsEntities.ContentPages AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for GhostPubsEntities.Categories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Categories
        [CMSModel.Category](T1.Category_CategoryID, T1.Category_Name)
    FROM (
        SELECT 
            T.CategoryID AS Category_CategoryID, 
            T.Name AS Category_Name, 
            True AS _from0
        FROM CMSModelStoreContainer.Category AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for GhostPubsEntities.ContentPages.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ContentPages
        [CMSModel.ContentPage](T1.ContentPage_PageID, T1.ContentPage_CategoryID, T1.ContentPage_OrderID, T1.ContentPage_PageTemplateID, T1.ContentPage_Name, T1.ContentPage_Title, T1.ContentPage_Lead, T1.ContentPage_WellHeader, T1.ContentPage_Description, T1.ContentPage_HtmlText, T1.ContentPage_DateCreated, T1.ContentPage_DateModified, T1.ContentPage_Deleted)
    FROM (
        SELECT 
            T.PageID AS ContentPage_PageID, 
            T.CategoryID AS ContentPage_CategoryID, 
            T.OrderID AS ContentPage_OrderID, 
            T.PageTemplateID AS ContentPage_PageTemplateID, 
            T.Name AS ContentPage_Name, 
            T.Title AS ContentPage_Title, 
            T.Lead AS ContentPage_Lead, 
            T.WellHeader AS ContentPage_WellHeader, 
            T.Description AS ContentPage_Description, 
            T.HtmlText AS ContentPage_HtmlText, 
            T.DateCreated AS ContentPage_DateCreated, 
            T.DateModified AS ContentPage_DateModified, 
            T.Deleted AS ContentPage_Deleted, 
            True AS _from0
        FROM CMSModelStoreContainer.ContentPage AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CMSModelStoreContainer.Book.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Book
        [CMSModel.Store.Book](T1.Book_BookId, T1.Book_Created, T1.Book_Modified, T1.Book_Deleted, T1.Book_Name)
    FROM (
        SELECT 
            T.BookId AS Book_BookId, 
            T.Created AS Book_Created, 
            T.Modified AS Book_Modified, 
            T.Deleted AS Book_Deleted, 
            T.Name AS Book_Name, 
            True AS _from0
        FROM GhostPubsEntities.Books AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for GhostPubsEntities.Books.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView25()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Books
        [CMSModel.Book](T1.Book_BookId, T1.Book_Name, T1.Book_Created, T1.Book_Modified, T1.Book_Deleted)
    FROM (
        SELECT 
            T.BookId AS Book_BookId, 
            T.Name AS Book_Name, 
            T.Created AS Book_Created, 
            T.Modified AS Book_Modified, 
            T.Deleted AS Book_Deleted, 
            True AS _from0
        FROM CMSModelStoreContainer.Book AS T
    ) AS T1");
        }
    }
}
